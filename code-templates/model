package @@package@@.models

import java.time.LocalDateTime
import io.getquill.{lift, quote, query}
import io.getquill.sources.sql.ops._
import shapeless.syntax.std.tuple._
import maiden.implicits.DateImplicits._
import maiden.implicits.DBImplicits._
import maiden.traits.{MaidenFullResponse, MaidenModel, WithApi}
import DB._


case class @@model@@FullResponse (
  @@baseFields@@
  @@refFields@@
) extends MaidenFullResponse

object @@model@@FullResponse {
  @@fullResponseBuild@@

  def extract(t: @@model@@FullResponse) =
    (@@model@@.apply _) tupled (@@model@@FullResponse.unapply(t).get.take(@@baseModelFieldCount@@))

}

case class @@model@@ (
  @@baseFields@@
) extends MaidenModel with WithApi

object @@model@@ {

  import @@appNameUpper@@Schema._

  //val fkAccessors = Map(@@accessorsMap@@)

  def exists(id: Long) = {
    val q = quote {
      query[@@model@@].filter(_.id == lift(id))
    }

    db.run(q.size) match {
      case x: Long if x > 0 => true
      case _ => false
    }
  }

  def get(id: Long) =
    findById(id).head

  @@magicMethods@@

  @@referenceMethods@@

}

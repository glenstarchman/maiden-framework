package @@package@@

import com.twitter.server.TwitterServer
import com.twitter.finagle.param.Stats
import com.twitter.finagle.{Http, ListeningServer}
import com.twitter.finagle.stats.{LoadedStatsReceiver, StatsReceiver}
import com.twitter.server.util.{JvmStats, TwitterStats}
import com.twitter.util.Await
import maiden.util.async.AsyncOps
import maiden.util.error.ErrorReporter._
import maiden.util.log.Logger._
import maiden.config.MaidenConfig
import @@appNameUpper@@Api._


object @@appNameUpper@@Boot extends TwitterServer {

  lazy val systemId = MaidenConfig.get[String]("app.id")
  lazy val port = MaidenConfig.get[Int]("app.port")
  lazy val environment = MaidenConfig.get[String]("app.environment")

  lazy val server: ListeningServer = Http.server
    .withLabel(systemId)
    .configured(Stats(LoadedStatsReceiver))
    .serve(s":${port}", apiService)

  def main() = {
    log.info(
        s"Booting ${systemId} in ${environment} mode on ${server.boundAddress}")
    sys.addShutdownHook(shutdown())
    registerMetricsAndMonitoring()
    Await.ready(server)
  }

  private def registerMetricsAndMonitoring(): Unit = {
    errorReporter.registerForUnhandledExceptions()
    JvmStats.register(LoadedStatsReceiver)
    TwitterStats.register(LoadedStatsReceiver)
  }

  private def shutdown(): Unit = {
    log.info(s"${systemId} is shutting down...")
    Await.ready(server.close())
  }
}
package @@package@@.api

import java.time.LocalDateTime
import scala.language.implicitConversions
import maiden.types.Exceptions._
import maiden.types.MaidenApi
import maiden.http.RequiredAuthRequestReader._
import maiden.auth.AuthenticatedClient
import maiden.http.Render.{render}
import maiden.implicits.DateImplicits._
import io.finch.{Endpoint, _}
import @@package@@.models._

object @@model@@Api extends MaidenApi {

  val prefix = "api" :: "@@lowerCaseModel@@"

  def @@lowerCaseModel@@Api() = get@@model@@ :+: delete@@model@@ :+: doc@@model@@

  //helper for creating
  val @@lowerCaseModel@@: Endpoint[@@model@@] = (@@createArgs@@ :: paramOption("createdAt").as[LocalDateTime] :: paramOption("updatedAt").as[LocalDateTime]).as[@@model@@]


  def doc@@model@@: Endpoint[Map[String, String]] =
    get(prefix :: "doc") { () => {
      val mount = prefix.toString
      val doc = Map(
        "Base Endpoint" -> mount,
        "Doc" -> s"GET ${mount}/doc",
        "Get" -> s"GET ${mount}/:id",
        "Delete" -> s"DELETE ${mount}/:id"
      )
      Ok(doc)
    }}

  def get@@model@@: Endpoint[@@model@@] =
    get(prefix::long("id")) { (id: Long) =>
      Ok(@@model@@.findById(id).head)
    }

  def delete@@model@@: Endpoint[Boolean] =
    delete(prefix::long("id")) { (id: Long) => {
      @@model@@.deleteById(id)
      Ok(true)
    }}


}
package @@package@@.api

import java.time.LocalDateTime
//import scala.language.implicitConversions
import io.finch._
/*
import io.finch.circe._
import io.circe.generic.semiauto._
import io.circe.java8.time._
*/
import maiden.types.Exceptions._
import maiden.types.MaidenApi
import maiden.http.RequiredAuthRequestReader._
import maiden.auth.AuthenticatedClient
import maiden.http.Render._
import maiden.implicits.DateImplicits._

import @@package@@.models._

object @@model@@Api extends MaidenApi {

  val prefix = "api" :: "@@lowerCaseModel@@"

  def @@lowerCaseModel@@Api() = get@@model@@ :+: delete@@model@@ :+: list@@model@@ :+: create@@model@@ :+: update@@model@@ :+: doc@@model@@

  def doc@@model@@: Endpoint[Map[String, String]] =
    get(prefix :: "doc") { () => {
      val mount = prefix.toString
      val doc = Map(
        "Base Endpoint" -> mount,
        "Model Name" -> "@@model@@",
        "Columns" -> "@@modelColumns@@",
        "Doc" -> s"GET ${mount}/doc",
        "Get" -> s"GET ${mount}/:id",
        "Create" -> s"PUT ${mount} params = @@createParams@@",
        "Update" -> s"POST ${mount}/:id params = @@createParams@@",
        "Delete" -> s"DELETE ${mount}/:id",
        "List" -> s"GET ${mount} params = start: Int = 0, count: Int = 10, byColumn: String = 'id'"
      )
      Ok(doc)
    }}

  def get@@model@@: Endpoint[@@model@@FullResponse] =
    get(prefix::long("id")) { (id: Long) =>
      render(@@model@@.get(id))
    }

  def delete@@model@@: Endpoint[Long] =
    delete(prefix::long("id")) { (id: Long) =>
      render(@@model@@.deleteById(id))
    }

  def create@@model@@: Endpoint[@@model@@FullResponse] =
    put(prefix :: @@createParamArgs@@) { (@@createParams@@) => render {
      val id = @@model@@.create(@@modelCreationArgs@@)
      val instance = @@model@@.findById(id)
      instance.head
    }}


  def update@@model@@: Endpoint[@@model@@FullResponse] =
    post(prefix :: long("id") :: @@optionalParams@@) { (id: Long, @@paramList@@) =>
      render {
        @@model@@.update(id, @@updateParams@@)
      }
    }


  def list@@model@@: Endpoint[List[@@model@@FullResponse]] =
    get(prefix :: int("start") :: int("count")) { (start: Int, count: Int) => {
      val results = @@model@@.getRangeById(start, count)
      render(results)
    }}


}
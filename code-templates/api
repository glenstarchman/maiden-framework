package @@package@@.api

import scala.language.implicitConversions
import maiden.types.Exceptions._
import maiden.types.MaidenApi
import maiden.http.RequiredAuthRequestReader._
import maiden.auth.AuthenticatedClient
import maiden.http.Render.{render}
import io.finch.{Endpoint, _}
import @@package@@.models._

object @@model@@Api extends MaidenApi {

  val prefix = "api" :: "@@lowerCaseModel@@"

  def @@lowerCaseModel@@Api() = get@@model@@ :+: delete@@model@@

  //helper for creating
  val @@lowerCaseModel@@: Endpoint[@@model@@] = ???//(param("id").as[Long] :: param("name").as[String]).as[Hello]


  def get@@model@@: Endpoint[@@model@@] =
    get(prefix::long("id")) { (id: Long) => {
      Ok(@@model@@.findById(id))
    }}

  def delete@@model@@: Endpoint[Boolean] =
    delete(prefix::long("id")) { (id: Long) => {
      @@model@@.deleteById(id)
      Ok(true)
    }}


}
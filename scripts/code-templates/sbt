import sbt.complete.DefaultParsers._
import NativePackagerHelper._

val quillVersion = "0.9.1-SNAPSHOT"
val maidenVersion = "0.2.1"

val commonSettings = Seq(
  organization := "@@namespace@@",
  version := "1.0.0",
  scalaVersion := "2.11.8",
  resolvers += Resolver.sonatypeRepo("snapshots"),
  resolvers += Resolver.sonatypeRepo("releases"),
  scalacOptions ++= Seq()
)


val baseBuildSettings = commonSettings ++ Seq(
	buildInfoKeys ++= Seq[BuildInfoKey](
    name, version, scalaVersion, sbtVersion,
    "hostname" -> java.net.InetAddress.getLocalHost().getHostName(),
    "deployer" -> System.getProperty("user.name"),
    "buildTimestamp" -> new java.util.Date(System.currentTimeMillis())
  ),
	buildInfoPackage := "@@namespace@@.@@appName@@.common",
	buildInfoOptions += BuildInfoOption.BuildTime,
  buildInfoOptions += BuildInfoOption.ToMap,
  unmanagedClasspath in Compile <+= (baseDirectory) map { bd => Attributed.blank(bd / "config") },
  unmanagedClasspath in Runtime <+= (baseDirectory) map { bd => Attributed.blank(bd / "config") }
)


lazy val migrate = inputKey[Unit]("Run migrations")


lazy val @@appName@@ = (project in file("."))
  .enablePlugins(BuildInfoPlugin)
  .settings(baseBuildSettings ++ Seq(
    bashScriptConfigLocation := Some("${app_home}/../config/launcher.conf"),
    mappings in Universal ++= directory("config"),
    mappings in Universal += {
      ((baseDirectory in Compile).value / "tools/zipkin.jar") -> "tools/zipkin.jar"
    },
    assemblyMergeStrategy in assembly := {
      case PathList("io", "netty", xs @ _*) => MergeStrategy.last
      case PathList(ps @ _*) if ps.last endsWith ".properties" => MergeStrategy.last
      case x =>
        val oldStrategy = (assemblyMergeStrategy in assembly).value
        oldStrategy(x)
    },
    unmanagedSourceDirectories in Compile += baseDirectory.value / "src",
    unmanagedSourceDirectories in Test += baseDirectory.value / "test",
    migrate := Def.inputTaskDyn {
      val args: Seq[String] = spaceDelimited("<arg>").parsed
      (runMain in Compile).toTask(s" maiden.models.Migrate ${args.mkString(" ")}")
    }.evaluated,

    libraryDependencies ++= Seq(
      "com.maiden" %% "maiden-framework" % maidenVersion,
      "io.getquill" %% "quill-core" % quillVersion,
      "io.getquill" %% "quill-sql" % quillVersion,
      "io.getquill" %% "quill-jdbc" % quillVersion,
      "io.getquill" %% "quill-async" % quillVersion,
      "com.googlecode.libphonenumber" % "libphonenumber" % "7.4.4"
    )
  )).enablePlugins(JavaAppPackaging)
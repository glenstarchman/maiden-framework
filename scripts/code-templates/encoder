package @@package@@.encoders


import com.twitter.finagle.http.Message
import com.twitter.finagle.http.Message.ContentTypeJson
import com.twitter.io.Buf._
import io.circe.{Encoder, Decoder}
import io.circe.generic.semiauto._
import io.circe.generic.auto._
import io.circe.parser._
import io.circe.java8.time._
import io.finch.EncodeResponse
import io.finch.circe._
import io.circe.syntax._
import @@package@@.models.{@@model@@, @@model@@FullResponse}

trait @@model@@ResponseEncoders {

  implicit val @@lowerCaseModel@@Encoder: Encoder[@@model@@] = deriveEncoder[@@model@@]

  implicit val @@lowerCaseModel@@FullResponseEncoder: Encoder[@@model@@FullResponse] = deriveEncoder[@@model@@FullResponse]


  implicit val @@lowerCaseModel@@Decoder: Decoder[@@model@@] = deriveDecoder[@@model@@]

  implicit val @@lowerCaseModel@@FulResponseDecoder: Decoder[@@model@@FullResponse] = deriveDecoder[@@model@@FullResponse]

  implicit def @@lowerCaseModel@@ResponseFullResponseEncoder: EncodeResponse[@@model@@FullResponse] =
    EncodeResponse(ContentTypeJson)(data =>
      Utf8(Map("@@payloadKey@@" -> data).asJson.noSpaces))

  implicit def @@lowerCaseModel@@ResponseFullListResponseEncoder: EncodeResponse[List[@@model@@FullResponse]] =
    EncodeResponse(ContentTypeJson)(data =>
      Utf8(Map("@@payloadKey@@" -> data).asJson.noSpaces))


}

object @@model@@ResponseEncoders extends @@model@@ResponseEncoders
package @@package@@.api

import java.time._
import com.twitter.util.{Await, Future}
import com.twitter.conversions.time._
import io.finch.{Endpoint, _}
import io.finch.circe._
import io.circe.Decoder
import io.circe.java8.time._
import io.circe.generic.auto._
import maiden.exceptions._
import maiden.types.MaidenApi
import maiden.http.Render._
import maiden.processing.Validations._
import @@package@@.models.@@model@@
import maiden.auth.MaidenAuthUser
@@securityImport@@

object @@model@@Api extends MaidenApi {

  private[this] implicit val @@lowerCaseModel@@BodyDecoder = Decoder.instance[@@model@@](c => {
    for {
      id <- c.downField("id").as[Option[Long]]
      @@coreFieldComprehensionMappings@@
      createdAt <- c.downField("createdAt").as[Option[LocalDateTime]]
      updatedAt <- c.downField("updatedAt").as[Option[LocalDateTime]]
    } yield @@model@@(id, @@coreFieldMappings@@)
  })

  private[this] val post@@model@@: Endpoint[@@model@@ => @@model@@] = body.as[@@model@@ => @@model@@]
  private[this] val put@@model@@: Endpoint[@@model@@] = body.as[@@model@@]

  private[this] def validate@@model@@(@@lowerCaseModel@@: @@model@@) = {
    try {
      Await.result(
        Future.collect(Seq(
          @@validations@@
        )), 1.second)
    } catch {
      case e: Exception => throw new ParamIncorrectException(message = e.getMessage, exc = Option(e))
    }
  }

  private[this] val prefix = "api" :: "@@lowerCaseModel@@"

  def @@lowerCaseModel@@Api() = get@@model@@ :+: delete@@model@@ /*:+: list@@model@@ */ :+: create@@model@@ :+: update@@model@@ :+: doc@@model@@

  private[this] def doc@@model@@ =
    get(prefix :: "doc" :: authorize) { (u: MaidenAuthUser) => {
      val mount = prefix.toString
      val doc = Map(
        "Base Endpoint" -> mount,
        "Model Name" -> "@@model@@",
        "Columns" -> "@@modelColumns@@",
        "Doc" -> s"GET ${mount}/doc",
        "Get" -> s"GET ${mount}/:id",
        "Create" -> s"PUT ${mount} params = @@createParams@@",
        "Update" -> s"POST ${mount}/:id params = @@createParams@@",
        "Delete" -> s"DELETE ${mount}/:id",
        "List" -> s"GET ${mount} params = start: Int = 0, count: Int = 10, byColumn: String = 'id'"
      )
      Ok(doc)
    }}

  private[this] def get@@model@@ =
    get(prefix :: long("id").should(positive[Long]) :: authorize) {
    (id: Long, u: MaidenAuthUser) =>
      render {
        @@model@@.get(id).full
      }
    }

  private[this] def delete@@model@@ =
    delete(prefix::long("id").should(positive[Long]) :: authorize) {
    (id: Long, u: MaidenAuthUser) =>
      render {
        @@model@@.deleteBy("id", id)
      }
    }

  private[this] def create@@model@@ =
    put(prefix :: put@@model@@ ::  authorize) {
    (@@lowerCaseModel@@: @@model@@, u: MaidenAuthUser) =>
      render {
        validate@@model@@(@@lowerCaseModel@@)
        @@model@@.create(@@lowerCaseModel@@.format).full
      }
    }

  private[this] def update@@model@@ =
    post(prefix :: long("id").should(positive[Long]) :: post@@model@@ :: authorize) {
    (id: Long, @@lowerCaseModel@@: @@model@@ => @@model@@, u: MaidenAuthUser) =>
      render {
          val old@@model@@ = @@model@@.get(id)
          val new@@model@@ = @@lowerCaseModel@@(old@@model@@).format
          validate@@model@@(new@@model@@)
          @@model@@.update(new@@model@@).full
      }
    }


/*
  private[this] def list@@model@@ =
    get(prefix :: string("col") :: int("start").should(positive[Int]) :: int("count").should(positive[Int]) :: authorize) {
    (col: String, start: Int, count: Int, u: MaidenAuthUser) =>
      render {
        @@model@@.getRangeBy(col, start, count).map(_.full)
      }
    }
    */
}
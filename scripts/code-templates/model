package @@package@@.models

import java.time._
import io.getquill.{lift, quote, query}
import io.getquill.sources.sql.ops._
import shapeless.syntax.std.tuple._
import maiden.implicits.DateImplicits._
import maiden.implicits.DBImplicits._
import io.circe.java8._
import maiden.traits.{MaidenFullResponse, MaidenModel, WithApi}
import maiden.models.@@dbDriverName@@._
import db._
import maiden.exceptions._
import maiden.processing.Formatters._
import @@appNameUpper@@Schema._


case class @@model@@FullResponse (
  @@baseFields@@
  @@refFields@@
) extends MaidenFullResponse

object @@model@@FullResponse {
  @@fullResponseBuild@@

  def extract(t: @@model@@FullResponse) =
    (@@model@@.apply _) tupled (@@model@@FullResponse.unapply(t).get.take(@@baseModelFieldCount@@))

}

case class @@model@@ (
  @@baseFields@@
) extends MaidenModel with WithApi {

  def save() = id match {
    case Some(i) if i != -1l => {
      if (@@model@@.exists(i)) {
        @@model@@.update(this)
      } else {
        @@model@@.create(this)
      }
    }
    case _ => @@model@@.create(this)
  }

  def delete() = id match {
    case Some(i) => @@model@@.deleteById(i)
    case _ => -1l
  }

  def format() = @@model@@(@@formattedCols@@)

}

object @@model@@ {

  def exists(id: Long) = {
    val q = quote {
      @@queryName@@.filter(_.id == lift(id))
    }

    db.run(q.size) match {
      case x: Long if x > 0 => true
      case _ => false
    }
  }

  def get(id: Long) =
    findById(id).headOption match {
      case Some(x) => x
      case _ => throw new EntityNotFoundException
    }

  @@magicMethods@@

  @@referenceMethods@@

}
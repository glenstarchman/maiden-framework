package @@package@@.models

import java.time._
import scala.language.postfixOps
import scala.language.implicitConversions
import com.twitter.util.{Await, Future }
import com.twitter.conversions.time._
import shapeless.Generic
import shapeless.syntax.std.tuple._
import maiden.traits._
import maiden.models.@@dbType@@._
import db._
import maiden.exceptions._
import maiden.processing.Formatters._
import @@appNameUpper@@Schema._

object  @@model@@Implicits {
  implicit val @@lowerCaseModel@@FullResponseGen = Generic[@@model@@FullResponse]
  implicit def @@lowerCaseModel@@ToFull(@@lowerCaseModel@@: @@model@@): @@model@@FullResponse = @@lowerCaseModel@@.full
  implicit def fullTo@@model@@(@@lowerCaseModel@@Full: @@model@@FullResponse): @@model@@ = @@lowerCaseModel@@Full.@@lowerCaseModel@@
}

import @@model@@Implicits._

case class @@model@@ (
  @@baseFields@@
) extends MaidenModel {

  @@caseClassReferences@@

  def full = {
    val refs = @@model@@.getAllRefs(this)
    val refVals = refs.productElements
    val t = @@model@@FullResponse(this)
    val @@lowerCaseModel@@Vals= @@lowerCaseModel@@FullResponseGen.to(t).slice(0, 1)
    val allVals = @@lowerCaseModel@@Vals ++ refVals
    @@lowerCaseModel@@FullResponseGen.from(allVals)
  }

  def save() = if (@@model@@.exists(id)) {
    @@model@@.update(this)
  } else {
    @@model@@.create(this)
  }

  def delete() =
    @@model@@.deleteBy("id", id)

  def format() = @@model@@(@@formattedCols@@)

}

object @@model@@ extends MaidenModelObject[@@model@@] {

  def exists(id: Long) = {
    val q = quote {
      @@queryName@@.filter(_.id == lift(id))
    }

    db.run(q.size) match {
      case x: Long if x > 0 => true
      case _ => false
    }
  }

  def get(id: Long) =
    findBy("id", id).headOption match {
      case Some(x) => x
      case _ => throw new EntityNotFoundException
    }
  def delete(id: Long) = deleteBy("id", id)

  @@magicMethods@@

  @@referenceMethods@@

}

case class @@model@@FullResponse (
  @@lowerCaseModel@@: @@model@@
  @@refFields@@
)



Model:

package **package**

final case class **model**(**modelAttributes**)

API:


package **package**

import maiden.util.http.HttpOps
import maiden.util.log.Logging
import io.finch.{Endpoint, _}

object **model**Api extends HttpOps with Logging {

  val prefix = **endpointPrefix** :: "**modelLower**"

  //default generated endpoints
  def **model**Api = get**model**ById :+: delete**model** :+: create**model** :+: update**model** :+: search**model** :+: list**model**


  private[this] def get**model**FromDataStore(id: Long) = {
    //lookup the model in the datastore
  }

  private[this] def save**model**ToDataStore(data: **model**) = {
    //lookup the model in the datastore
  }

  def get**model**ById: Endpoint[**model**] =
    get(prefix :: long(id)) { (id: Long) => {
      val instance = get**model**FromDataStore(id)
      Ok(instance)
    }}

  def create**model**: Endpoint[**model**] =
    post(prefix :: body.as[**model**]) { data:**model** => {
      val instance = save**model**ToDataStore(data)
      Ok(instance)
    }}

  def delete**model**: Endpoint[**model**] =
    delete(prefix :: long(id)) { (id: Long) => {
      val result = delete**model**FromDataStore(id)
      OK(result)
    }}


  def update**model**: Endpoint[**model**] =
    post(prefix :: long("id") :: body.as[**model**]) { data:**model** => {
      val instance = save**model**ToDataStore(data)
      Ok(instance)
    }}

}


Encoders:
package **package**

import com.twitter.finagle.http.Message
import com.twitter.finagle.http.Message.ContentTypeJson
import com.twitter.io.Buf._
import io.circe.Encoder
import io.circe.syntax._
import io.finch.EncodeResponse

trait **model**ResponseEncoders {

  implicit val **lowerModel**Encoder = Encoder.instance[**model**] { h =>
    Map(**modelMap**).asJson
    //Map("hello" -> Map("name" -> h.name)).asJson
  }

  implicit def **lowerModel**ResponseEncoder: EncodeResponse[**model**] =
    EncodeResponse(ContentTypeJson)(data => Utf8(Map("payload" -> data).asJson.noSpaces))

}

object **model**ResponseEncoders extends **model**ResponseEncoders